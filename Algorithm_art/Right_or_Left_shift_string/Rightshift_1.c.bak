#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#define IPV4 0x0
#define IPV6 0x1
int check_ip_version(const char *ipaddr)
{
  /** 2001::3:4:5/64 **/  
  /** 192.168.10.21/24 **/

  if (strchr(ipaddr, ':')!=NULL) {
    return IPV6;
  } else {
    return IPV4;
  }

  return -1;
}

int check_subnet6(const char *ipaddr1, const char *netmask1,
    const char *ipaddr2, const char *netmask2)
{
  int i, j;
  struct in6_addr ip1, ip2, nk1, nk2;
  unsigned short *p1, *p2, *n1, *n2;
  int div , sub;
  unsigned short nk_sub;

  if (check_ip_version(ipaddr1)!=IPV6 ||
      check_ip_version(ipaddr2)!=IPV6 ) {
    return -1;
  }

  div = atoi(netmask1)/16;
  sub = atoi(netmask1)%16;

  if (atoi(netmask1) != atoi(netmask2)) {
    return -1;
  }
  memset(&ip1, 0, sizeof(ip1));
  memset(&ip2, 0, sizeof(ip2));
  memset(&nk1, 0, sizeof(nk1));
  memset(&nk2, 0, sizeof(nk2));

  inet_pton(AF_INET6, ipaddr1, &ip1);
  inet_pton(AF_INET6, ipaddr2, &ip2);

  p1 = (unsigned short *)&(ip1.in6_u.u6_addr16);
  p2 = (unsigned short *)&(ip2.in6_u.u6_addr16);
  n1 = (unsigned short *)&(nk1.in6_u.u6_addr16);
  n2 = (unsigned short *)&(nk2.in6_u.u6_addr16);

  for (i=0; i<div; i++) {
    for ( j=15; j>=0; j--) {
      n1[i] |= 1<<j;
    }
  }

  /** Host byte sequence 
    ffff ffff ffff ffff ffff  ... 0000 0000 
  **/
  for (i=15; i>(15-sub); i--) {
    n1[div+1] |= 1<<i;
  }

  /** Convert to host byte sequence **/
  for (i=0; i<8; i++) {
    p1[i] = ntohs(p1[i]);
    p2[i] = ntohs(p2[i]);
  }

  /** div: 整数商 **/
  for (i=0; i<div; i++) {
    if ( (p1[i] & n1[i]) != (p2[i] & n1[i])) {
      return -1;
    }
  }

  /** sub: 掩码和16球余的结果 **/
  nk_sub = 1 << sub;
  if ( (p1[i] & nk_sub) !=  (p2[i] & nk_sub) ) {
    return -1;
  }

  return 0;
}

int main(int argc, char argv[])
{
	char ip1[] = "1234::4567:89ab";
	char netmask1[] = "96";
	char ip2[] = "1234::7456:abab";
	char netmask2[] = "96";

	if (check_subnet6(ip1, netmask1, ip2, netmask2) == 0) 
	{
		puts("yes");
	}else {
		puts("no");
	}

	return 0;
}
